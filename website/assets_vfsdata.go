// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package website

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains project assets.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-12-03T03:59:35Z"),
		},
		"/songs": &vfsgen۰DirInfo{
			name:    "songs",
			modTime: mustUnmarshalTextTime("2017-12-03T03:59:35Z"),
		},
		"/songs/bangtan_boys-save_me.txt": &vfsgen۰CompressedFileInfo{
			name:             "bangtan_boys-save_me.txt",
			modTime:          mustUnmarshalTextTime("2017-12-03T03:59:35Z"),
			uncompressedSize: 2029,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x4b\x4e\xc6\x20\x10\xde\x73\x0a\x92\xff\x0a\x8c\x8b\xee\xc0\xe1\x77\xe5\xca\x13\xb0\x20\x6a\x34\x6d\xa2\x68\xd2\xdb\x1b\x28\x23\x0c\xad\xd5\x1a\x6b\xba\xf8\x93\xe1\x91\x8f\x79\x3f\x08\x8f\xe1\xd9\x77\xf2\xce\xbd\x7b\x79\xeb\x85\x7b\x0b\x0f\xc3\x4b\x27\x8d\xeb\xef\x83\xeb\xa5\x19\xc6\x57\xf1\xe4\xc7\x4e\xa2\x10\x06\x32\x69\x10\xe7\x13\x88\xb4\xd1\xdd\x4e\xa7\x05\x81\x89\xe8\x71\xa3\x14\x02\x61\xf1\x34\x2a\x72\x72\x6c\x06\xec\xcb\x84\x04\x17\x3f\xe3\x51\x13\xb1\xb6\xd8\x06\xd6\x68\x42\xfd\x98\xdb\x92\x93\x3c\x71\x55\xc6\x75\xca\x38\x5e\x4d\x2a\x6e\x5a\xef\xb1\x36\xfc\x3b\xb9\x5c\xc8\x7a\x31\xb7\x8c\xca\xfb\x3a\x1b\xfe\xbf\x9e\x52\xcb\x1c\x78\x8c\x5d\x2f\xb5\xef\xb2\xb2\xcf\x34\x71\xb9\x35\x65\x3b\x8d\xce\x37\x31\x35\x9d\xf3\x55\x3b\x5e\x9f\x80\xad\x1c\x26\x42\x21\x5b\xd9\x9f\x34\x55\x66\x16\x41\x26\x97\x64\x8d\xca\xb3\xc4\xa2\x68\xef\xb4\x34\xcc\x2a\xd0\xc0\xd4\xbe\x7f\xaf\xf4\x32\x4a\x07\x1e\xa5\xf3\xea\x37\x6c\x54\xf2\x6b\xf7\x97\x32\x23\xfc\xaf\x47\x6a\xc9\x38\x48\x87\x2b\xeb\x47\x00\x00\x00\xff\xff\x0a\x15\x36\xdf\xed\x07\x00\x00"),
		},
		"/songs/girls_generation-gee.txt": &vfsgen۰CompressedFileInfo{
			name:             "girls_generation-gee.txt",
			modTime:          mustUnmarshalTextTime("2017-12-03T03:59:35Z"),
			uncompressedSize: 2556,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcd\x6e\x83\x30\x0c\xbe\xfb\x29\x2c\x71\xe7\x54\x38\x70\x2b\x81\xe4\x39\x7a\x88\x34\xb4\xaa\x95\x18\x3b\xec\xed\x27\x27\x31\x75\xc2\xcf\xfa\xc3\xb4\x9f\x1e\x3e\x1c\x6c\x93\x7c\x38\xfe\x92\xa1\x1b\x8e\xb6\x42\x63\x2d\x1c\xde\x87\x97\x73\x5f\xa1\xe9\xfa\xe3\x1b\x1a\x7b\xb2\xfd\x61\xe8\xce\x27\x78\xb5\x1f\x15\xb6\x00\x26\x2b\x40\x67\x05\xb4\x05\x82\x12\xd6\x0d\xa0\x2d\x11\x74\x56\x3a\xdb\x08\x5b\x53\x90\x1e\xfc\xa9\x1c\xb3\x5d\xff\x9a\x32\x2e\xf0\x44\x28\xc0\x84\xa4\xbd\xd5\x4f\x18\xff\x66\xf4\x30\xd4\x02\x6e\x4b\xdc\x94\x2b\x07\xaf\xa7\xa0\x42\x1d\xe5\xfe\x49\x78\xdf\x72\x1e\xbf\x13\x1a\xa6\x30\x07\x17\x65\xd0\xd2\xf5\x2e\x74\xc8\xbe\x40\x87\x91\x2c\xcf\xdf\x84\xb5\x53\x4e\x4c\x9e\xf9\x4d\x12\x24\xea\x10\xd7\x61\x49\x0f\x10\x63\x8c\x26\x33\x72\xe2\xb4\x8c\xf7\xa0\x16\x6d\xbd\x86\x09\x93\x96\xdb\x5b\xdf\xb9\x32\x15\xcf\xd7\xab\x9c\xb4\xcd\x52\x2c\xff\x32\xe8\x1f\xfb\x99\xb2\x7f\x97\xf6\xfe\x9f\xf4\xae\x94\x1d\xfe\xac\xee\x1e\x15\x1e\xce\x29\x0f\x97\xa5\xf7\x90\xbc\xfe\x92\xbe\x72\x2a\x3b\x2b\x2d\xa9\xda\x0e\xe3\xbb\x33\xbd\xdf\xe4\x26\xb9\x22\x0a\x5f\x7a\x7b\xd2\x00\xf9\x44\xf3\x2e\xc5\x2f\x2a\x8a\x47\x39\xd1\x4f\xea\x4b\x63\x08\x66\x2b\x27\xe7\x06\x7b\xf9\x3b\xb6\x32\x27\x47\xfe\xa4\x8d\xf9\x19\x00\x00\xff\xff\x30\x72\x88\xbe\xfc\x09\x00\x00"),
		},
		"/songs/tengen_toppa-sorairo_days.txt": &vfsgen۰CompressedFileInfo{
			name:             "tengen_toppa-sorairo_days.txt",
			modTime:          mustUnmarshalTextTime("2017-12-03T03:59:35Z"),
			uncompressedSize: 962,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x3b\x0e\x83\x30\x0c\xdd\x7d\x8a\x48\x5c\x01\x18\xd8\x08\xa6\x39\x40\xb9\x40\x86\xa8\x45\xad\x08\xa2\x74\xe0\xf6\x95\x1d\x03\x41\x55\x3f\x03\x55\xa5\x67\x48\xec\x67\x3f\xdb\xca\xd8\x8e\x57\x57\xa8\xa3\x1f\x6c\x3b\x78\x85\x76\xba\x81\xbd\x8f\x67\x3f\x14\xaa\x71\xdd\xc9\x75\xaa\xf1\x7d\x6f\xe1\xe2\xa6\x42\x21\x80\x4e\x09\x55\x92\x2d\xa6\x53\x88\x5d\x5b\xc2\x67\x3e\x32\xf6\xaf\x5b\x32\xe0\x90\x64\x2f\x8d\x84\x6b\x06\x5f\xc3\x91\x03\xeb\x95\x2c\xb4\x58\x86\xda\x92\x84\xef\x92\x70\xc9\x0b\x5f\x0e\xff\x46\x63\x91\x99\x07\xa2\xa1\xcb\xb9\x1e\xf2\x5a\x84\x4a\x0c\x13\x7e\x42\x32\x1b\x27\x71\xbe\xca\x8e\x5a\x33\x0c\xbe\x6e\xea\xc5\xab\x37\x21\x48\x47\xcc\xa1\x4a\xf2\x75\x14\x09\xc5\x88\x44\xea\x78\x8d\xf3\x7c\xbb\xe8\x68\xf1\x13\x09\x73\xe0\x3f\x99\xe6\x54\xa6\xaf\x02\xf2\x42\x9f\x9c\xd2\xde\x9f\x9f\xee\x23\x00\x00\xff\xff\xcc\x50\x1f\xc4\xc2\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/songs"].(os.FileInfo),
	}
	fs["/songs"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/songs/bangtan_boys-save_me.txt"].(os.FileInfo),
		fs["/songs/girls_generation-gee.txt"].(os.FileInfo),
		fs["/songs/tengen_toppa-sorairo_days.txt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
